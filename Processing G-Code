//**************** Processing Gcode**************
void gcode_processing(char* line)
{
  //initialise the index to zero
  int currentIndex = 0;
  
  //temporary array
  
  if (line[currentIndex] == 'G')  // if it is a G code
  {
    //read the next two indices to check the code and copy it into temp array
    temp[0] = line[currentIndex + 1]; 
    temp[1] = line[currentIndex + 2];

    //add null char to temp array
    temp[2] = '\0'; 
    
    Serial.print("G Command: ");
    Serial.println(temp);

    //convert the values of the temp array to integer
    int code = atoi(temp);
    
    Serial.print("code =");
    Serial.println(code);

    //check the code
    if ((code == 1) || (code == 2) || (code == 3))
    {
      //if the code is 1 or 2 or 3
      //find the position of  X, Y, F in the array
      char* xIndex = strchr(line, 'X');
      char* yIndex = strchr(line, 'Y');
      char* FIndex = strchr(line, 'F');

      //convert the values after X,Y, F index to float to check the cordinates
      float newXpos = atof(xIndex + 1);
      float newYpos = atof(yIndex + 1);
      float Fvalue = atof(FIndex + 1);
      
      Serial.print("Fvalue =");
      Serial.println(Fvalue);
      Serial.print("xIndex =");
      Serial.println(xIndex);
      Serial.print("yIndex =");
      Serial.println(yIndex);
      Serial.print("newXpos, newYpos =");
      Serial.print("(");
      Serial.print(newXpos);
      Serial.print(",");
      Serial.print(newYpos);
      Serial.println(")");

      //if there is no F value,Draw
      if (Fvalue == 0)
      {
        draw(newXpos, newYpos);
      }
    }
    //else ingore the G code
    else
    {
      //ignore other gcodes
    }
  }
 // if it is a M code
  else if (line[currentIndex] == 'M')
  {
    //read the next two indices to check the code and copy it into temp array
    temp[0] = line[currentIndex + 1];
    temp[1] = line[currentIndex + 2];
    
    //add null char to temp array
    temp[2] = '\0';
    
    Serial.print("M Command: ");
    Serial.println(temp);

     //convert the values of the temp array to integer
    int code = atoi(temp);
    Serial.print("code =");
    Serial.println(code);
    //if the code is 3, the pen should write
    if (code == 03)
    {
      writing();
    }
    //if the code is 5, the pen should not write
    else
    {
      not_writing();
    }
  }
}



void draw(float x, float y)
{
  
  Serial.println("entered draw");
  if (x< Xmin)
  {
    x=Xmin;
  }
  if (x> Xmax)
  {
    x=Xmax;
  }
 if (y< Ymin)
  {
    y=Ymin;
  }
  if (y> Ymax)
  {
    y=Ymax;
  }
  //convert the millimeters into steps
  x = float(x * StepsPerMillimeterX);
  
  //convert the millimeters into steps
  y = float(y * StepsPerMillimeterY);

  //old positions -> initially zero
  float x0 = Xpos;
  float y0 = Ypos;

  //initialize change
  float ChangeInX = 0;
  float ChangeInY = 0;
  
  //if new x is greater than old x, move away from the origin
  if (x > x0) 
  {
    Serial.println("x>x0");
    xDir = away;
    Serial.print("X direction =");
    Serial.println(xDir);
    //calculate the change in x to find the number of steps
    ChangeInX = x - x0;
  }
  else  //if old x is greater than new x, move towards the origin
  {
    Serial.println("x0>x");
    xDir = origin;
    //calculate the change in x to find the number of steps
    ChangeInX = x0 - x;
    Serial.print("X direction =");
    Serial.println(xDir);
  }

  //if new y is greater than old y, move away from the origin
  if (y > y0)
  {
    Serial.println("y>y0");
    yDir = away;
    //calculate the change in y to find the number of steps
    ChangeInY = y - y0;
    Serial.print("Y direction =");
    Serial.println(yDir);
  }
  
  else //if old y is greater than new y, move towards the origin
  {
    Serial.println("y0>y");
    
    yDir = origin;
     //calculate the change in y to find the number of steps
    ChangeInY = y0 - y;
    Serial.print("Y direction =");
    Serial.println(yDir);
  }

  // print the number of steps
  Serial.print("Change in X =");
  Serial.println(ChangeInX);
  Serial.print("Change in Y =");
  Serial.println(ChangeInY);

  //if the change in x is more than the change in Y then move xstepper first and theny stepper
  if (ChangeInX >= ChangeInY)
  {
    for (float i = 0; i < ChangeInX; i++)
    {
      xstepper_rev(xDir);
      ChangeInY ++;
      if (ChangeInY > ChangeInX)
      {
        ChangeInY --;
        ystepper_rev(yDir);
      }
    }
  }

  //if the change in Y is more than the change in X then move xstepper first and theny stepper
  else if (ChangeInY > ChangeInX)
  {
    for (float i = 0; i < ChangeInY; i++)
    {
      ystepper_rev(yDir);
      ChangeInX ++;
      if (ChangeInX > ChangeInY)
      {
        ChangeInX --;
        xstepper_rev(xDir);
      }
    }
  }
  Serial.println("Finished Drawing");
  delay(150); //line delay
  //set the current values to xpos and ypos to use for next calculations
  Xpos = x;
  Ypos = y;
}
